import os
import json
import logging
import shutil
from datetime import datetime, timedelta
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
    CallbackQueryHandler,
    PicklePersistence,
)
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
# TOKEN - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API Telegram
# STORAGE_PATH - –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
# LOG_FILE - —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
# EDIT_TIMEOUT - –≤—Ä–µ–º—è, –≤ —Ç–µ—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç
TOKEN = "7831050216:AAE8RZ7cN82t2Yj_ulJsaRT7yf9hPDgzjhc"
STORAGE_PATH = "storage"
LOG_FILE = "bot.log"
EDIT_TIMEOUT = 2 * 60 * 60  # 2 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
SUPPORTED_FORMATS = ["jpg", "jpeg", "png", "gif", "bmp"]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler (–º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π)
# ENTER_ACT_NUMBER - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∞–∫—Ç–∞
# UPLOAD_PHOTOS - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
ENTER_ACT_NUMBER, UPLOAD_PHOTOS = range(2)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
logging.basicConfig(
    filename=LOG_FILE,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_handler.setFormatter(console_formatter)
logging.getLogger().addHandler(console_handler)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞
    markup = ReplyKeyboardMarkup(
        [["üìù –†–µ–≥. –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è", "üìã –ê–∫—Ç—ã –æ –±—Ä–∞–∫–µ"], ["üîé –ü–æ–∏—Å–∫ –∞–∫—Ç–∞", "ü§ñ –ü–æ–º–æ—â–Ω–∏–∫ –†–ü–†–ó"]],
        resize_keyboard=True,
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–∞–Ω–¥–µ /help
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–≤–æ–¥–∞ –†–ü–†–ó –¥–ª—è —É—á–µ—Ç–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π.\n\n"
        "üîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n"
        "üîπ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help",
        reply_markup=markup
    )
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    help_text = (
        "ü§ñ *–ë–æ—Ç —É—á–µ—Ç–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –†–ü–†–ó* ü§ñ\n\n"
        "üìã *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
        "üî∏ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–æ–≤ –æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è—Ö\n"
        "üî∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–¥–æ 3 —à—Ç.)\n"
        "üî∏ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–æ–≤ –ø–æ –º–µ—Å—è—Ü–∞–º\n"
        "üî∏ –ü–æ–∏—Å–∫ –∞–∫—Ç–æ–≤\n\n"
        "üì± *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "üîπ /start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑ –º–µ–Ω—é\n"
        "üîπ /help - –ø–æ–∫–∞–∑ —ç—Ç–æ–π —Å–ø—Ä–∞–≤–∫–∏\n"
        "üîπ /cancel - –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏\n\n"
        "üì∏ *–ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:*\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PNG, JPG, JPEG, GIF, BMP\n"
        "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ –æ–¥–∏–Ω –∞–∫—Ç"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É")

def validate_act_number(number: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –∞–∫—Ç–∞ (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 4 —Ü–∏—Ñ—Ä)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä –∏ –∏–º–µ–µ—Ç –¥–ª–∏–Ω—É –æ—Ç 1 –¥–æ 4 —Å–∏–º–≤–æ–ª–æ–≤
    return number.isdigit() and 1 <= len(number) <= 4

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
async def save_act(act_number: str, user_id: int, photos: list) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–∫—Ç –æ –±—Ä–∞–∫–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î/–Ω–æ–º–µ—Ä_–∞–∫—Ç–∞
    date_folder = datetime.now().strftime("%Y-%m-%d")
    act_folder = os.path.join(STORAGE_PATH, date_folder, act_number)
    os.makedirs(act_folder, exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–æ—Ç 1 –¥–æ 3 —à—Ç—É–∫)
    saved_photos = 0
    for i, photo in enumerate(photos[:3], 1):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            ext = photo.file_name.split('.')[-1].lower() if '.' in photo.file_name else ''
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            if not ext or ext not in SUPPORTED_FORMATS:
                logging.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {ext if ext else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}")
                ext = "jpg"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º jpg –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            photo_path = os.path.join(act_folder, f"photo_{i}.{ext}")
            await photo.download_to_drive(photo_path)
            saved_photos += 1
            logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–æ—Ç–æ {i} –¥–ª—è –∞–∫—Ç–∞ {act_number}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ {i} –¥–ª—è –∞–∫—Ç–∞ {act_number}: {str(e)}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º —Ñ–æ—Ç–æ
    
    logging.info(f"–í—Å–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_photos} —Ñ–æ—Ç–æ –¥–ª—è –∞–∫—Ç–∞ {act_number}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª
    metadata = {
        "–Ω–æ–º–µ—Ä_–∞–∫—Ç–∞": act_number,
        "–¥–∞—Ç–∞_—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏": datetime.now().strftime("%Y-%m-%d %H:%M"),
        "telegram_id": str(user_id),
        "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Ñ–æ—Ç–æ": saved_photos,
        "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ_—Ñ–æ—Ä–º–∞—Ç—ã": ", ".join(SUPPORTED_FORMATS).upper()
    }
    with open(os.path.join(act_folder, "info.json"), "w", encoding="utf-8") as f:
        json.dump(metadata, f, ensure_ascii=False, indent=2)

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_action(user_id, "—Å–æ–∑–¥–∞–Ω–∏–µ", act_number)
    return act_folder

def log_action(user_id: int, action_type: str, act_number: str) -> None:
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–≥-—Ñ–∞–π–ª"""
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–µ–π—Å—Ç–≤–∏–∏
    log_entry = (
        f"{datetime.now()} - UserID: {user_id} - {action_type} –∞–∫—Ç–∞ ‚Ññ{act_number}\n"
    )
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(log_entry)
    
    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    logging.info(f"–î–ï–ô–°–¢–í–ò–ï: {action_type} –∞–∫—Ç–∞ ‚Ññ{act_number} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∞
async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –∞–∫—Ç–∞ –æ –±—Ä–∞–∫–µ"""
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    user_id = update.message.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∞–∫—Ç–∞")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    reply_kb = ReplyKeyboardMarkup(
        [["‚óÄÔ∏è –ù–∞–∑–∞–¥"]],
        resize_keyboard=True
    )
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –∞–∫—Ç–∞
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–∫—Ç–∞ –æ –±—Ä–∞–∫–µ (–æ—Ç 1 –¥–æ 4 —Ü–∏—Ñ—Ä):", reply_markup=reply_kb)
    return ENTER_ACT_NUMBER

async def process_act_number(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–æ–º–µ—Ä –∞–∫—Ç–∞"""
    act_number = update.message.text
    user_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –∞–∫—Ç–∞
    if not validate_act_number(act_number):
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∞–∫—Ç–∞: {act_number}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞! –ù–æ–º–µ—Ä –∞–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 4 —Ü–∏—Ñ—Ä. –ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –±—É–∫–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return ENTER_ACT_NUMBER

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∞–∫—Ç–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["act_number"] = act_number
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –Ω–æ–º–µ—Ä –∞–∫—Ç–∞: {act_number}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    reply_kb = ReplyKeyboardMarkup(
        [["‚óÄÔ∏è –ù–∞–∑–∞–¥"]],
        resize_keyboard=True
    )
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
    await update.message.reply_text(
        "üì∏ –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è (–æ—Ç 1 –¥–æ 3 —à—Ç.):\n\n" 
        "‚ö†Ô∏è –í–∞–∂–Ω–æ! –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ!\n"
        "‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PNG, JPG, JPEG",
        reply_markup=reply_kb
    )
    return UPLOAD_PHOTOS

async def get_image_file(message):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç File-–æ–±—ä–µ–∫—Ç –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –∏–ª–∏ None, None"""
    try:
        if message.photo and len(message.photo) > 0:
            file = await message.photo[-1].get_file()
            if not file:
                return None, None
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º jpg –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            file.file_name = f"photo.jpg"
            return file, "jpg"
        elif message.document and hasattr(message.document, 'mime_type') and message.document.mime_type and message.document.mime_type.startswith("image/"):
            file = await message.document.get_file()
            if not file or not hasattr(file, 'file_name') or not file.file_name:
                return None, None
                
            ext = file.file_name.split('.')[-1].lower() if '.' in file.file_name else ''
            if not ext or ext not in SUPPORTED_FORMATS:
                return None, None
                
            return file, ext
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
    
    return None, None

async def handle_bad_image(update, user_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"""
    logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    reply_kb = ReplyKeyboardMarkup(
        [["‚óÄÔ∏è –ù–∞–∑–∞–¥"]],
        resize_keyboard=True
    )
    await update.message.reply_text(
        f"‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: {', '.join(SUPPORTED_FORMATS).upper()}."
        "\n\n–°–æ–≤–µ—Ç: –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –∫–∞–∫ —Ñ–∞–π–ª (–¥–æ–∫—É–º–µ–Ω—Ç) —á–µ—Ä–µ–∑ —Å–∫—Ä–µ–ø–∫—É."
        "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ‚óÄÔ∏è –ù–∞–∑–∞–¥ –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        reply_markup=reply_kb
    )
    return UPLOAD_PHOTOS

async def process_photos(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    user_data = context.user_data
    user_id = update.message.from_user.id
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    if "photos" not in user_data:
        user_data["photos"] = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    if len(user_data["photos"]) >= 3:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
        await update.message.reply_text("üì∏ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–º–∞–∫—Å–∏–º—É–º 3).")
        return await finish_registration(update, context)

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        file, ext = await get_image_file(update.message)
        if not file:
            return await handle_bad_image(update, user_id)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        if not hasattr(file, 'file_name') or not file.file_name:
            file.file_name = f"photo_{len(user_data['photos']) + 1}.{ext}"
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫
        user_data["photos"].append(file)
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {file.file_name}")
        
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Å–∫–æ–ª—å–∫–æ –µ—â–µ —Ñ–æ—Ç–æ –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å
        remaining = 3 - len(user_data["photos"])
        await update.message.reply_text(f"‚úÖ –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ ({len(user_data['photos'])}/3). –û—Å—Ç–∞–ª–æ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å: {remaining} üì∏")
        
        # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        if len(user_data["photos"]) >= 3:
            return await finish_registration(update, context)
            
        return UPLOAD_PHOTOS
    except Exception as e:
        logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return UPLOAD_PHOTOS

async def finish_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
    act_number = context.user_data["act_number"]
    user_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ
    if "photos" not in context.user_data or not context.user_data["photos"]:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
        await update.message.reply_text("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!")
        return UPLOAD_PHOTOS
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç
    try:
        act_folder = await save_act(act_number, user_id, context.user_data["photos"])
        logging.info(f"–ê–∫—Ç ‚Ññ{act_number} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await update.message.reply_text(f"‚úÖ –ê–∫—Ç ‚Ññ{act_number} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        return ConversationHandler.END
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–∫—Ç–∞ ‚Ññ{act_number}: {str(e)}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return ConversationHandler.END

async def cancel_registration(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∞"""
    user_id = update.message.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∞–∫—Ç–∞")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
    await update.message.reply_text("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def go_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = update.message.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await start(update, context)
    return ConversationHandler.END

async def show_acts_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Å—è—Ü–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–æ–≤"""
    user_id = update.message.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–æ–≤")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        if not os.path.exists(STORAGE_PATH):
            logging.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {STORAGE_PATH} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            await update.message.reply_text('–ê–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤ —Å –∞–∫—Ç–∞–º–∏
        months = {}
        for entry in os.listdir(STORAGE_PATH):
            if os.path.isdir(os.path.join(STORAGE_PATH, entry)):
                try:
                    month = datetime.strptime(entry, '%Y-%m-%d').strftime('%Y-%m')
                    months[month] = months.get(month, 0) + 1
                except ValueError:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç—ã
                    logging.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º: {entry}")
                    continue

        if not months:
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–æ–≤, –Ω–æ –∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            await update.message.reply_text('üìÇ –ê–∫—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        for month in sorted(months.keys(), reverse=True):
            month_name = datetime.strptime(month, '%Y-%m').strftime('%B %Y')
            keyboard.append([InlineKeyboardButton(
                text=f"{month_name} ({months[month]} –∞–∫—Ç–æ–≤)",
                callback_data=f'month:{month}'
            )])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text('üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–æ–≤:', reply_markup=reply_markup)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –º–µ–Ω—é —Å {len(months)} –º–µ—Å—è—Ü–∞–º–∏")

    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}')
        await update.message.reply_text('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        print(f"–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –º–µ–Ω—é –∞–∫—Ç–æ–≤: {str(e)}")

async def search_act(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –∞–∫—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)"""
    user_id = update.message.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–∏—Å–∫ –∞–∫—Ç–∞")
    
    # –ü–æ–∫–∞ —ç—Ç–æ –∑–∞–≥–ª—É—à–∫–∞, –≤ –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–æ–∏—Å–∫
    await update.message.reply_text("üîç –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

async def assistant_rprs(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â–Ω–∏–∫ –†–ü–†–ó"""
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–º–æ—â–Ω–∏–∫–∞ (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ)
    await update.message.reply_text(
        "ü§ñ –§—É–Ω–∫—Ü–∏—è –ü–æ–º–æ—â–Ω–∏–∫ –†–ü–†–ó –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â–Ω–∏–∫–∞ –†–ü–†–ó")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
def cleanup_old_data():
    """–£–¥–∞–ª—è–µ—Ç –∞–∫—Ç—ã —Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞"""
    try:
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É, —Å—Ç–∞—Ä—à–µ –∫–æ—Ç–æ—Ä–æ–π –∞–∫—Ç—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã
        threshold = datetime.now() - timedelta(days=90)
        deleted = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        if not os.path.exists(STORAGE_PATH):
            os.makedirs(STORAGE_PATH)
            logging.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–æ–≤: {STORAGE_PATH}")
            return
        
        # –û–±—Ö–æ–¥–∏–º –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∞–∫—Ç–∞–º–∏
        for root, dirs, files in os.walk(STORAGE_PATH):
            if 'info.json' in files:
                try:
                    # –ß–∏—Ç–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∞
                    with open(os.path.join(root, 'info.json'), 'r', encoding='utf-8') as f:
                        metadata = json.load(f)
                        reg_date = datetime.strptime(metadata['–¥–∞—Ç–∞_—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'], '%Y-%m-%d %H:%M')
                        
                        # –ï—Å–ª–∏ –∞–∫—Ç —Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                        if reg_date < threshold:
                            shutil.rmtree(root)
                            deleted += 1
                            logging.info(f'–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –∞–∫—Ç: {root}')
                except Exception as e:
                    logging.error(f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {root}: {str(e)}')
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—á–∏—Å—Ç–∫–∏
        logging.info(f'–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∞–∫—Ç–æ–≤: {deleted}')
        print(f"–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ {deleted} —Å—Ç–∞—Ä—ã—Ö –∞–∫—Ç–æ–≤")
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}')


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
    persistence = PicklePersistence(filepath="bot_data.pkl")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –Ω–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    application = Application.builder().token(TOKEN).persistence(persistence).build()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∞
    conv_handler = ConversationHandler(
        # –¢–æ—á–∫–∏ –≤—Ö–æ–¥–∞ - –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—É—Å–∫–∞—é—Ç –¥–∏–∞–ª–æ–≥
        entry_points=[MessageHandler(filters.Regex("^üìù –†–µ–≥. –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è$"), start_registration)],
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        states={
            # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –∞–∫—Ç–∞
            ENTER_ACT_NUMBER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex("^‚óÄÔ∏è –ù–∞–∑–∞–¥$"), process_act_number),
                MessageHandler(filters.Regex("^‚óÄÔ∏è –ù–∞–∑–∞–¥$"), go_back)
            ],
            # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
            UPLOAD_PHOTOS: [
                MessageHandler(filters.PHOTO | filters.Document.ALL, process_photos),
                MessageHandler(filters.Regex("^‚óÄÔ∏è –ù–∞–∑–∞–¥$"), go_back),
                MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex("^‚óÄÔ∏è –ù–∞–∑–∞–¥$"), process_photos)
            ],
        },
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –¥–∏–∞–ª–æ–≥–∞
        fallbacks=[CommandHandler("cancel", cancel_registration)],
        # –í–∫–ª—é—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        name="registration_conversation",
        persistent=True,
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))  # –ö–æ–º–∞–Ω–¥–∞ /start
    application.add_handler(CommandHandler("help", help_command))  # –ö–æ–º–∞–Ω–¥–∞ /help
    application.add_handler(conv_handler)  # –î–∏–∞–ª–æ–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∞
    application.add_handler(MessageHandler(filters.Regex("^üìã –ê–∫—Ç—ã –æ –±—Ä–∞–∫–µ$"), show_acts_menu))  # –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–æ–≤
    application.add_handler(MessageHandler(filters.Regex("^üîé –ü–æ–∏—Å–∫ –∞–∫—Ç–∞$"), search_act))  # –ü–æ–∏—Å–∫ –∞–∫—Ç–∞
    application.add_handler(MessageHandler(filters.Regex("^ü§ñ –ü–æ–º–æ—â–Ω–∏–∫ –†–ü–†–ó$"), assistant_rprs))  # –ü–æ–º–æ—â–Ω–∏–∫ –†–ü–†–ó

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º
    logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    # –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    import asyncio
    try:
        await asyncio.Future()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã")
        print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
        pass

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(STORAGE_PATH):
        os.makedirs(STORAGE_PATH)
        print(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è: {STORAGE_PATH}")
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
    print("=" * 50)
    print("–ó–ê–ü–£–°–ö –ë–û–¢–ê –£–ß–ï–¢–ê –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ô –†–ü–†–ó")
    print(f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {', '.join(SUPPORTED_FORMATS)}")
    print(f"–•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: {os.path.abspath(STORAGE_PATH)}")
    print(f"–õ–æ–≥-—Ñ–∞–π–ª: {os.path.abspath(LOG_FILE)}")
    print("=" * 50)
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    cleanup_old_data()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    import asyncio
    try:
        asyncio.run(main())
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")
        print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
        print("–ë–æ—Ç –∞–≤–∞—Ä–∏–π–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")