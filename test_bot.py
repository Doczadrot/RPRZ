import pytest
from telegram import Update, Message, User, Chat, Document, PhotoSize
from telegram.ext import ContextTypes, ConversationHandler
from main import start_registration, process_act_number, process_photos, finish_registration, show_acts_menu, search_act, ENTER_ACT_NUMBER, UPLOAD_PHOTOS, validate_act_number, SUPPORTED_FORMATS, start, help_command

class DummyContext:
    def __init__(self):
        self.user_data = {}

class DummyDocument:
    def __init__(self, file_name="test.jpg"):
        self.file_name = file_name
    async def get_file(self):
        if self.file_name == "error.jpg":
            return None
        return DummyFile(self.file_name)

class DummyPhotoSize:
    def __init__(self, error=False):
        self.error = error
    async def get_file(self):
        if self.error:
            return None
        return DummyFile("photo.jpg")

class DummyMessage:
    def __init__(self, text):
        self.text = text
        self.replies = []
        self.photo = []
        self.document = None
        self.from_user = User(id=12345, first_name='Test', is_bot=False)
    async def reply_text(self, text, reply_markup=None):
        self.replies.append(text)
        return text

class DummyFile:
    def __init__(self, file_name="test.jpg"):
        self.file_name = file_name
    async def download_to_drive(self, path):
        pass

class DummyUpdate:
    def __init__(self, text, photo=None, document=None, photo_error=False):
        self.message = DummyMessage(text)
        if photo:
            self.message.photo = [DummyPhotoSize(error=photo_error)]
        if document:
            self.message.document = DummyDocument(document)

@pytest.mark.asyncio
async def test_registration_flow():
    context = DummyContext()
    update = DummyUpdate('üìù –†–µ–≥. –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è')
    result = await start_registration(update, context)
    assert result == ENTER_ACT_NUMBER
    
    update = DummyUpdate('123')
    result = await process_act_number(update, context)
    assert context.user_data['act_number'] == '123'
    assert result == UPLOAD_PHOTOS
    
    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
    update = DummyUpdate('', photo=True)
    result = await process_photos(update, context)
    assert result == UPLOAD_PHOTOS
    assert len(context.user_data.get('photos', [])) == 1
    
@pytest.mark.asyncio
async def test_photo_processing():
    # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    context = DummyContext()
    context.user_data['act_number'] = '123'
    
    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    update = DummyUpdate('', photo=True)
    result = await process_photos(update, context)
    assert result == UPLOAD_PHOTOS
    assert len(context.user_data.get('photos', [])) == 1
    
    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    update = DummyUpdate('', document='test.jpg')
    result = await process_photos(update, context)
    assert result == UPLOAD_PHOTOS
    assert len(context.user_data.get('photos', [])) == 2
    
    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    update = DummyUpdate('', document='test.txt')
    result = await process_photos(update, context)
    assert result == UPLOAD_PHOTOS
    assert len(context.user_data.get('photos', [])) == 2  # –ù–µ –¥–æ–ª–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
    assert "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞" in update.message.replies[-1]
    
    # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    update = DummyUpdate('', document='testfile')
    result = await process_photos(update, context)
    assert result == UPLOAD_PHOTOS
    assert len(context.user_data.get('photos', [])) == 2  # –ù–µ –¥–æ–ª–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
    assert "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞" in update.message.replies[-1]
    
    # –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    update = DummyUpdate('', document='error.jpg')
    result = await process_photos(update, context)
    assert result == UPLOAD_PHOTOS
    assert len(context.user_data.get('photos', [])) == 2  # –ù–µ –¥–æ–ª–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
    assert "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ" in update.message.replies[-1]
    
    # –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ
    update = DummyUpdate('', photo=True, photo_error=True)
    result = await process_photos(update, context)
    assert result == UPLOAD_PHOTOS
    assert len(context.user_data.get('photos', [])) == 2  # –ù–µ –¥–æ–ª–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
    assert "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ" in update.message.replies[-1]
    
    # –¢–µ—Å—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    update = DummyUpdate('', photo=True)
    result = await process_photos(update, context)
    assert len(context.user_data.get('photos', [])) == 3
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞
    update = DummyUpdate('', photo=True)
    result = await process_photos(update, context)
    assert len(context.user_data.get('photos', [])) == 3  # –ù–µ –¥–æ–ª–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
    assert "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π" in update.message.replies[-1]  # –ù–µ –¥–æ–ª–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è

@pytest.mark.asyncio
async def test_validate_act_number():
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ –∞–∫—Ç–∞
    assert validate_act_number('123') == True
    assert validate_act_number('1234') == True
    assert validate_act_number('12345') == False  # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    assert validate_act_number('abc') == False    # –ù–µ —Ü–∏—Ñ—Ä—ã
    assert validate_act_number('12a') == False    # –°–º–µ—à–∞–Ω–Ω—ã–π
    assert validate_act_number('') == False       # –ü—É—Å—Ç–æ–π

@pytest.mark.asyncio
async def test_search_flow():
    context = DummyContext()
    update = DummyUpdate('üîç –ü–æ–∏—Å–∫ –∞–∫—Ç–∞')
    await search_act(update, context)
    assert len(update.message.replies) > 0
    assert "–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ" in update.message.replies[-1]

@pytest.mark.asyncio
async def test_show_acts_menu():
    context = DummyContext()
    update = DummyUpdate('üìú –ê–∫—Ç—ã –æ –±—Ä–∞–∫–µ')
    await show_acts_menu(update, context)
    assert len(update.message.replies) > 0
    
@pytest.mark.asyncio
async def test_start_command():
    context = DummyContext()
    update = DummyUpdate('/start')
    await start(update, context)
    assert len(update.message.replies) > 0
    assert "–ü—Ä–∏–≤–µ—Ç!" in update.message.replies[-1]
    assert "/help" in update.message.replies[-1]
    
@pytest.mark.asyncio
async def test_help_command():
    context = DummyContext()
    update = DummyUpdate('/help')
    await help_command(update, context)
    assert len(update.message.replies) > 0
    assert "–ë–æ—Ç —É—á–µ—Ç–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –†–ü–†–ó" in update.message.replies[-1]
    assert "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏" in update.message.replies[-1]
    
@pytest.mark.asyncio
async def test_cancel_registration():
    from main import cancel_registration
    context = DummyContext()
    update = DummyUpdate('/cancel')
    result = await cancel_registration(update, context)
    assert result == ConversationHandler.END
    assert "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞" in update.message.replies[-1]